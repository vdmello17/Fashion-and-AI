# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ydQ3JABKQVwVNwoMNAd--S4_ToJ1nrxh
"""

import streamlit as st
import numpy as np
import joblib
import tensorflow as tf
from PIL import Image
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import pandas as pd
import gdown
import joblib
import os

import gdown
import joblib

# URLs from Google Drive (replace with real ones)
embeddings_url = "https://drive.google.com/file/d/1KSWU-6Y7_S_N-5tXUArY4nFYRCvOsOAw/view?usp=sharing"
images_url = "https://drive.google.com/file/d/1Emphcy2LxNgHRwr2-pZxtIpBTlPj_vvV/view?usp=drive_link"

# Download if not already present
gdown.download(embeddings_url, "image_embeddings.pkl", quiet=False)
gdown.download(images_url, "x_test_images.pkl", quiet=False)

# Load files
image_embeddings = joblib.load("image_embeddings.pkl")
x_test = joblib.load("x_test_images.pkl")

# --- Load Models and Data ---
st.set_page_config(page_title="AI in Fashion", layout="wide")

cnn_model = tf.keras.models.load_model("cnn_model.keras")
sentiment_model = joblib.load("sentiment_model.pkl")
forecast = pd.read_csv("arima_forecast.csv")

# --- App Title ---
st.title("ðŸ‘— AI in Fashion: Trends, Personalization & Insights")

# --- Section 1: Image Classification ---
st.header("1. Fashion Image Classification")

uploaded_file = st.file_uploader("Upload a fashion image", type=["jpg", "png"])
if uploaded_file:
    image = Image.open(uploaded_file).convert("L").resize((28, 28))
    st.image(image, caption="Uploaded Image", use_column_width=False)
    img_array = np.array(image).reshape(1, 28, 28, 1) / 255.0
    pred = cnn_model.predict(img_array)
    pred_class = np.argmax(pred)
    st.success(f"Predicted Class: **{pred_class}**")

# --- Section 2: Recommendation System ---
st.header("2. See Visually Similar Items")

index_input = st.number_input("Enter image index (0â€“9999)", min_value=0, max_value=9999, step=1)
if st.button("Show Similar Items"):
    def get_similar_images(idx, top_n=5):
        sims = cosine_similarity(image_embeddings[idx].reshape(1, -1), image_embeddings)[0]
        top_indices = sims.argsort()[::-1][1:top_n+1]
        return top_indices

    top_similar = get_similar_images(index_input)

    st.subheader("Query Image")
    st.image(x_test[index_input].reshape(28, 28), caption="Query", width=100)

    st.subheader("Top 5 Similar Images")
    cols = st.columns(5)
    for i, idx in enumerate(top_similar):
        with cols[i]:
            st.image(x_test[idx].reshape(28, 28), width=100, caption=f"Sim {i+1}")

# --- Section 3: Sentiment Analysis ---
st.header("3. Sentiment Analysis of a Fashion Review")

review_text = st.text_area("Type your review here:")
if review_text:
    prediction = sentiment_model.predict([review_text])[0]
    sentiment = "Positive ðŸ˜Š" if prediction == 1 else "Negative ðŸ˜ž"
    st.write(f"Predicted Sentiment: **{sentiment}**")

# --- Section 4: Trend Forecasting ---
st.header("4. Fashion Trend Forecast (ARIMA)")

if st.button("Show Forecast Plot"):
    st.line_chart(forecast.values.flatten())
    st.caption("This is a synthetic ARIMA forecast of fashion demand trends.")